[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "api-to-mcp-converter"
version = "0.3.0"
description = "LLM-powered tool to convert any API into MCP-compatible modules"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "API-to-MCP Tool Contributors"}
]
maintainers = [
    {name = "API-to-MCP Tool Contributors"}
]
keywords = ["api", "mcp", "model-context-protocol", "llm", "tool-generation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Code Generators",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "pydantic>=1.10.0",
    "pathlib-mate>=1.0.0",
]

[project.optional-dependencies]
llm = [
    "openai>=1.0.0",
    "anthropic>=0.8.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
langgraph = [
    "langgraph>=0.1.0",
]
all = [
    "api-to-mcp-converter[llm,dev,langgraph]"
]

[project.urls]
Homepage = "https://github.com/yourusername/api-to-mcp-converter"
Documentation = "https://github.com/yourusername/api-to-mcp-converter/blob/main/README.md"
Repository = "https://github.com/yourusername/api-to-mcp-converter.git"
Issues = "https://github.com/yourusername/api-to-mcp-converter/issues"

[project.scripts]
api-to-mcp = "main:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]
exclude = ["tests*", "docs*", "examples*", "generated_tools*"]

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | generated_tools
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_column_numbers = true
show_error_codes = true
show_error_context = true 